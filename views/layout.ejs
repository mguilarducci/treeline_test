<!DOCTYPE html>
<html>
  <head>
    <title>Beerpack club</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/angular-toastr.css">
    <link rel="stylesheet" href="/styles/bootstrap.3.1.1.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <!--Added this so the client has access to the csrf tag and it's grabbed first service side on every page -->
    <script type="text/javascript">
    window.SAILS_LOCALS = { _csrf: "<%= _csrf %>" };
    </script>
  </head>

  <body ng-app="ApplicationModule">

    <div class="container-fluid" ng-controller="SignupController" ng-cloak>

      <!-- Creates the navbar -->
      <nav class="navbar navbar-default navbar-inverse">
    
        <!-- This creates the mechanism for the collapse button -->
        <button type="button" class="navbar-toggle" data-toggle="collapse" ng-init="navCollapsed = true" ng-click="navCollapsed = !navCollapsed">
    
          <!-- This controls the number of lines in the image when the nav collapse -->
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>

        <!-- This is the brand on the left-hand side. -->
        <a class="navbar-brand" href="/#">Beerpack.club</a>
        <div class="collapse navbar-collapse" ng-class="!navCollapsed && 'in'">

        <% if(typeof me !== 'undefined' && me.name) { %>
        <div class="collapse navbar-collapse" ng-class="!navCollapsed && 'in'">
          <!-- This is what "styles" the li's as navbar items -->
          <ul class="nav navbar-nav navbar-left">
            <li><a href="#/stock">My beers</a></li>
            <li><a href="#/beers">Beers</a></li>
            <li><a href="#/beers/new">New beer</a></li>
          </ul>
          <ul class="nav navbar-nav navbar-right">
            <!-- navbar-right pulls this element right -->
            <!-- Using ng-show instead of ng-if because we need this mark-up to be in the dom when signup controller
            fires.  If it's not there (which it wouldn't be in the case of ng-if) then the scope of the signup
            controller will not be tied to this element. -->
            <li>
              <a href="/logout">sign-out</a>
            </li>
            <!-- <a ng-controller="signinController" class="btn btn-default navbar-btn navbar-right" href="#" ng-if="!isAuthenticated">sign-in</a> -->
            <!-- Using ng-show instead of ng-if because we need this mark-up to be in the dom when signup controller
            fires.  If it's not there (which it wouldn't be in the case of ng-if) then the scope of the signup
            controller will not be tied to this element. -->
          </ul>
        </div>
        <% } else { %>
        <!-- LOGIN FORM -->  
        <form ng-submit="submitLoginForm()" class="navbar-form navbar-right">

            <!-- E M A I L -->
            <div class="form-group">
                <input ng-model="loginForm.email" type="text" placeholder="Email" name="email" class="form-control">
            </div>

            <!-- P A S S W O R D -->
            <div class="form-group">
                <input ng-model="loginForm.password" type="password" placeholder="Password" name="password" class="form-control">
            </div>

            <!-- S U B M I T -->
            <button type="submit" class="btn btn-success">
              <span ng-show="!loginForm.loading">Sign in</span>
              <span ng-show="loginForm.loading" class="fa fa-spinner"></span>
              <span ng-show="loginForm.loading">Signing up...</span>
            </button>
            <input type="hidden" name="_csrf" value="<%= _csrf %>" />
        </form>

        <% } %>
      </nav>
    </div>

    <% if(typeof me !== 'undefined' && me.name) { %>
      <div ng-view></div>
    <% } else { %>
      <%- body %>
    <% } %>
    
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <div class="container">
      <hr>
      <footer class="footer pull-right">
        <div>
          Powered by <a href="http://sailsjs.com/">sailsjs.org</a>
        </div>
      </footer>
    </div>

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular.1.3.js"></script>
    <script src="/js/dependencies/angular-route.1.3.15.js"></script>
    <script src="/js/dependencies/angular-toastr.js"></script>
    <script src="/js/dependencies/compareTo.module.js"></script>
    <script src="/js/public/signup/SignupModule.js"></script>
    <script src="/js/private/beers/BeerModule.js"></script>
    <script src="/js/public/homepage/HomepageModule.js"></script>
    <script src="/js/private/beers/BeerController.js"></script>
    <script src="/js/public/core/ApplicationModule.js"></script>
    <script src="/js/public/homepage/HomepageController.js"></script>
    <script src="/js/public/signup/SignupController.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
